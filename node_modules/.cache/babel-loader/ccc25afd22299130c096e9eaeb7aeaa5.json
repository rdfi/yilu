{"ast":null,"code":"import { sortDirections } from './sort-directions';\nexport async function getFlights(sortColumn = '', sortDirection = sortDirections.none) {\n  const results = flights.filter(f => f.type === 'FLIGHT');\n  if (sortDirection === sortDirections.none) return results;\n\n  switch (sortColumn) {\n    case 'boarding-time':\n      return Promise.resolve(results.sort((flight1, flight2) => {\n        var _flight1$detail, _flight2$detail, _flight1$detail2, _flight2$detail2;\n\n        return sortDirection === sortDirections.ascending ? (flight1 === null || flight1 === void 0 ? void 0 : (_flight1$detail = flight1.detail) === null || _flight1$detail === void 0 ? void 0 : _flight1$detail.boarding) >= (flight2 === null || flight2 === void 0 ? void 0 : (_flight2$detail = flight2.detail) === null || _flight2$detail === void 0 ? void 0 : _flight2$detail.boarding) ? 1 : -1 : (flight1 === null || flight1 === void 0 ? void 0 : (_flight1$detail2 = flight1.detail) === null || _flight1$detail2 === void 0 ? void 0 : _flight1$detail2.boarding) >= (flight2 === null || flight2 === void 0 ? void 0 : (_flight2$detail2 = flight2.detail) === null || _flight2$detail2 === void 0 ? void 0 : _flight2$detail2.boarding) ? -1 : 1;\n      }));\n\n    case 'departure-time':\n      return Promise.resolve(results.sort((flight1, flight2) => {\n        return sortDirection === sortDirections.ascending ? flight1.departure >= flight2.departure ? 1 : -1 : flight1.departure >= flight2.departure ? -1 : 1;\n      }));\n\n    case 'origin':\n      return Promise.resolve(results.sort((flight1, flight2) => {\n        var _flight1$origin, _flight2$origin, _flight1$origin2, _flight2$origin2;\n\n        return sortDirection === sortDirections.ascending ? ((_flight1$origin = flight1.origin) === null || _flight1$origin === void 0 ? void 0 : _flight1$origin.value) >= ((_flight2$origin = flight2.origin) === null || _flight2$origin === void 0 ? void 0 : _flight2$origin.value) ? 1 : -1 : ((_flight1$origin2 = flight1.origin) === null || _flight1$origin2 === void 0 ? void 0 : _flight1$origin2.value) >= ((_flight2$origin2 = flight2.origin) === null || _flight2$origin2 === void 0 ? void 0 : _flight2$origin2.value) ? -1 : 1;\n      }));\n\n    case 'destination':\n      return Promise.resolve(results.sort((flight1, flight2) => {\n        var _flight1$destination, _flight2$destination, _flight1$destination2, _flight2$destination2;\n\n        return sortDirection === sortDirections.ascending ? ((_flight1$destination = flight1.destination) === null || _flight1$destination === void 0 ? void 0 : _flight1$destination.value) >= ((_flight2$destination = flight2.destination) === null || _flight2$destination === void 0 ? void 0 : _flight2$destination.value) ? 1 : -1 : ((_flight1$destination2 = flight1.destination) === null || _flight1$destination2 === void 0 ? void 0 : _flight1$destination2.value) >= ((_flight2$destination2 = flight2.destination) === null || _flight2$destination2 === void 0 ? void 0 : _flight2$destination2.value) ? -1 : 1;\n      }));\n\n    default:\n      return results;\n  }\n}\n/** \n * @typedef Flight\n * @property {string} segment_id\n * @property {string} type\n * @property {{type: string, value: string}} origin\n * @property {{type: string, value: string}} destination\n * @property {number} [departure]\n * @property {{boarding?: number, flight_number?: string, gate?: string, seat?: string}} detail\n */\n\n/** @type {Flight[]} */\n\nconst flights = [{\n  \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33723\",\n  \"type\": \"FLIGHT\",\n  \"origin\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"TXL\"\n  },\n  \"destination\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"MUC\"\n  },\n  \"departure\": 1523602800,\n  \"detail\": {\n    \"boarding\": 1523601000,\n    \"flight_number\": \"LH2031\",\n    \"gate\": \"B24\",\n    \"seat\": \"17B\"\n  }\n}, {\n  \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33724\",\n  \"type\": \"FLIGHT\",\n  \"origin\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"LAX\"\n  },\n  \"destination\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"LIS\"\n  },\n  \"departure\": 1593601200,\n  \"detail\": {\n    \"boarding\": 1593597600,\n    \"flight_number\": \"BA0222\",\n    \"gate\": \"B15\",\n    \"seat\": \"1A\"\n  }\n}, {\n  \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33725\",\n  \"type\": \"FLIGHT\",\n  \"origin\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"LIS\"\n  },\n  \"destination\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"DUB\"\n  },\n  \"departure\": 1596277800,\n  \"detail\": {\n    \"boarding\": 1596276000,\n    \"flight_number\": \"TP2042\",\n    \"gate\": \"A42\",\n    \"seat\": \"14F\"\n  }\n}, {\n  \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33726\",\n  \"type\": \"FLIGHT\",\n  \"origin\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"CRO\"\n  },\n  \"destination\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"SCO\"\n  },\n  \"detail\": {\n    \"flight_number\": \"XE2531\"\n  }\n}, {\n  \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33727\",\n  \"type\": \"FLIGHT\",\n  \"origin\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"NYC\"\n  },\n  \"destination\": {\n    \"type\": \"AIRPORT\",\n    \"value\": \"RAR\"\n  },\n  \"departure\": 1580554200,\n  \"detail\": {\n    \"boarding\": 1580553000,\n    \"flight_number\": \"PE6031\",\n    \"gate\": \"B54\"\n  }\n}];","map":{"version":3,"sources":["/home/rdfi/Projects/yilu/flight-list/src/flights/flighs.service.js"],"names":["sortDirections","getFlights","sortColumn","sortDirection","none","results","flights","filter","f","type","Promise","resolve","sort","flight1","flight2","ascending","detail","boarding","departure","origin","value","destination"],"mappings":"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","sourcesContent":["import {sortDirections} from './sort-directions';\nexport async function getFlights(sortColumn = '', sortDirection = sortDirections.none) {    \n    const results = flights.filter(f => f.type === 'FLIGHT');        \n    if (sortDirection === sortDirections.none) return results;\n    switch (sortColumn) {\n        case 'boarding-time':\n            return Promise.resolve(results.sort((flight1, flight2) => {\n                return sortDirection === sortDirections.ascending ? flight1?.detail?.boarding >= flight2?.detail?.boarding ? 1 : -1 : flight1?.detail?.boarding >= flight2?.detail?.boarding ? -1 : 1\n            }));\n        case 'departure-time':\n            return Promise.resolve(results.sort((flight1, flight2) => {\n                return sortDirection === sortDirections.ascending ? flight1.departure >= flight2.departure ? 1 : -1 : flight1.departure >= flight2.departure ? -1 : 1\n            }));\n        case 'origin':\n            return Promise.resolve(results.sort((flight1, flight2) => {\n                return sortDirection === sortDirections.ascending ? flight1.origin?.value >= flight2.origin?.value ? 1 : -1 : flight1.origin?.value >= flight2.origin?.value ? -1 : 1\n            }));\n        case 'destination':\n            return Promise.resolve(results.sort((flight1, flight2) => {\n                return sortDirection === sortDirections.ascending ? flight1.destination?.value >= flight2.destination?.value ? 1 : -1 : flight1.destination?.value >= flight2.destination?.value ? -1 : 1\n            }));\n        default:\n            return results;\n    }\n}\n\n/** \n * @typedef Flight\n * @property {string} segment_id\n * @property {string} type\n * @property {{type: string, value: string}} origin\n * @property {{type: string, value: string}} destination\n * @property {number} [departure]\n * @property {{boarding?: number, flight_number?: string, gate?: string, seat?: string}} detail\n */\n\n\n/** @type {Flight[]} */\nconst flights = [\n    {\n        \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33723\",\n        \"type\": \"FLIGHT\",\n        \"origin\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"TXL\"\n        },\n        \"destination\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"MUC\"\n        },\n        \"departure\": 1523602800,\n        \"detail\": {\n            \"boarding\": 1523601000,\n            \"flight_number\": \"LH2031\",\n            \"gate\": \"B24\",\n            \"seat\": \"17B\"\n        }\n    },\n    {\n        \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33724\",\n        \"type\": \"FLIGHT\",\n        \"origin\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"LAX\"\n        },\n        \"destination\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"LIS\"\n        },\n        \"departure\": 1593601200,\n        \"detail\": {\n            \"boarding\": 1593597600,\n            \"flight_number\": \"BA0222\",\n            \"gate\": \"B15\",\n            \"seat\": \"1A\"\n        }\n    },\n\n    {\n        \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33725\",\n        \"type\": \"FLIGHT\",\n        \"origin\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"LIS\"\n        },\n        \"destination\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"DUB\"\n        },\n        \"departure\": 1596277800,\n        \"detail\": {\n            \"boarding\": 1596276000,\n            \"flight_number\": \"TP2042\",\n            \"gate\": \"A42\",\n            \"seat\": \"14F\"\n        }\n    },\n\n    {\n        \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33726\",\n        \"type\": \"FLIGHT\",\n        \"origin\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"CRO\"\n        },\n        \"destination\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"SCO\"\n        },\n        \"detail\": {\n            \"flight_number\": \"XE2531\",\n        }\n    },\n\n    {\n        \"segment_id\": \"07f77c9f-7fdf-446b-91d5-52e900f33727\",\n        \"type\": \"FLIGHT\",\n        \"origin\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"NYC\"\n        },\n        \"destination\": {\n            \"type\": \"AIRPORT\",\n            \"value\": \"RAR\"\n        },\n        \"departure\": 1580554200,\n        \"detail\": {\n            \"boarding\": 1580553000,\n            \"flight_number\": \"PE6031\",\n            \"gate\": \"B54\"\n        }\n    },\n\n]\n\n\n"]},"metadata":{},"sourceType":"module"}