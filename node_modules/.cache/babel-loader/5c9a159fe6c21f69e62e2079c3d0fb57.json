{"ast":null,"code":"var _jsxFileName = \"/home/rdfi/Projects/yilu/flight-list/src/flights/SortableColumn.js\";\nimport React from 'react';\nimport { sortDirections } from './flighs.service';\n/**\n * @param {object} props\n * @param {string} props.columnName\n * @param {{columnName: string, direction: string}} [props.sortO]\n * @param {object} props.children\n * @param {(sortOptions: {columnName: string, direction:string}) => void} props.onSortingChanged\n */\n\nexport function SortableColumn({\n  columnName,\n  sortOptions,\n  children,\n  onSortingChanged\n}) {\n  const sortDirection = (sortOptions === null || sortOptions === void 0 ? void 0 : sortOptions.columnName) === columnName ? sortOptions === null || sortOptions === void 0 ? void 0 : sortOptions.direction : sortDirections.none;\n\n  function handleSortingChanged() {\n    switch (sortDirection) {\n      case sortDirections.none:\n        onSortingChanged({\n          columnName,\n          direction: sortDirections.descending\n        });\n        break;\n\n      case sortDirections.descending:\n        onSortingChanged({\n          columnName,\n          direction: sortDirections.ascending\n        });\n        break;\n\n      case sortDirections.ascending:\n        onSortingChanged({\n          columnName,\n          direction: sortDirections.none\n        });\n        break;\n\n      default:\n        throw new Error('Invalid sort direction');\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: `sortable ${sortDirection || ''}`,\n    onClick: handleSortingChanged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, children);\n}\nSortableColumn.propTypes = {\n  columnName: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  onSortingChanged: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/rdfi/Projects/yilu/flight-list/src/flights/SortableColumn.js"],"names":["React","sortDirections","SortableColumn","columnName","sortOptions","children","onSortingChanged","sortDirection","direction","none","handleSortingChanged","descending","ascending","Error","propTypes","PropTypes","string","isRequired","node","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAGA;;;;;;;;AAOA,OAAO,SAASC,cAAT,CAAwB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,WAAd;AAA2BC,EAAAA,QAA3B;AAAqCC,EAAAA;AAArC,CAAxB,EAAiF;AACpF,QAAMC,aAAa,GAAG,CAAAH,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAED,UAAb,MAA4BA,UAA5B,GAAyCC,WAAzC,aAAyCA,WAAzC,uBAAyCA,WAAW,CAAEI,SAAtD,GAAkEP,cAAc,CAACQ,IAAvG;;AACA,WAASC,oBAAT,GAAgC;AAC5B,YAAQH,aAAR;AACI,WAAKN,cAAc,CAACQ,IAApB;AACIH,QAAAA,gBAAgB,CAAC;AAACH,UAAAA,UAAD;AAAaK,UAAAA,SAAS,EAAEP,cAAc,CAACU;AAAvC,SAAD,CAAhB;AACA;;AACJ,WAAKV,cAAc,CAACU,UAApB;AACIL,QAAAA,gBAAgB,CAAC;AAACH,UAAAA,UAAD;AAAaK,UAAAA,SAAS,EAAEP,cAAc,CAACW;AAAvC,SAAD,CAAhB;AACA;;AACJ,WAAKX,cAAc,CAACW,SAApB;AACIN,QAAAA,gBAAgB,CAAC;AAACH,UAAAA,UAAD;AAAaK,UAAAA,SAAS,EAAEP,cAAc,CAACQ;AAAvC,SAAD,CAAhB;AACA;;AACJ;AACI,cAAM,IAAII,KAAJ,CAAU,wBAAV,CAAN;AAXR;AAaH;;AAED,SAAO;AAAK,IAAA,SAAS,EAAG,YAAWN,aAAa,IAAI,EAAG,EAAhD;AAAmD,IAAA,OAAO,EAAEG,oBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACFL,QADE,CAAP;AAGH;AAEDH,cAAc,CAACY,SAAf,GAA2B;AACvBX,EAAAA,UAAU,EAAEY,SAAS,CAACC,MAAV,CAAiBC,UADN;AAEvBZ,EAAAA,QAAQ,EAAEU,SAAS,CAACG,IAAV,CAAeD,UAFF;AAGvBX,EAAAA,gBAAgB,EAAES,SAAS,CAACI,IAAV,CAAeF;AAHV,CAA3B","sourcesContent":["import React from 'react';\nimport { sortDirections } from './flighs.service'\n\n\n/**\n * @param {object} props\n * @param {string} props.columnName\n * @param {{columnName: string, direction: string}} [props.sortO]\n * @param {object} props.children\n * @param {(sortOptions: {columnName: string, direction:string}) => void} props.onSortingChanged\n */\nexport function SortableColumn({ columnName, sortOptions, children, onSortingChanged }) {    \n    const sortDirection = sortOptions?.columnName === columnName ? sortOptions?.direction : sortDirections.none;\n    function handleSortingChanged() {\n        switch (sortDirection) {\n            case sortDirections.none:\n                onSortingChanged({columnName, direction: sortDirections.descending});\n                break;\n            case sortDirections.descending:\n                onSortingChanged({columnName, direction: sortDirections.ascending});\n                break;\n            case sortDirections.ascending:\n                onSortingChanged({columnName, direction: sortDirections.none});\n                break;\n            default:\n                throw new Error('Invalid sort direction');\n        }\n    }\n\n    return <div className={`sortable ${sortDirection || ''}`} onClick={handleSortingChanged}>\n        {children}\n    </div>\n}\n\nSortableColumn.propTypes = {\n    columnName: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n    onSortingChanged: PropTypes.func.isRequired\n}\n"]},"metadata":{},"sourceType":"module"}